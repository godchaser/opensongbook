package org.duckdns.valci.opensongbook.data;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Properties;

public class SqliteManager {

    // SELECT title FROM songs WHERE lyrics MATCH 'Isu*'
    // static String dbPath = "test_data//opensongbookdb.sqlite";
    //static String dbPath = "//home//samuel//workspace//.metadata//.plugins//org.eclipse.wst.server.core//tmp0//wtpwebapps//opensongbook//WEB-INF//resources//opensongbook.sql";
    //static String dbPath = "//home//samuel//workspace//.metadata//.plugins//org.eclipse.wst.server.core//tmp1//wtpwebapps//opensongbook//WEB-INF//resources//opensongbook.sql";
    static String dbPath = "//home//samuel//DEVELOPMENT//tomcat_webapp//wtpwebapps//opensongbook//WEB-INF//resources//opensongbook.sql";
    private String dropTableCMD = "DROP TABLE "+ SongSQLContainer.TABLE;
    private static String createTableCMD = "CREATE TABLE IF NOT EXISTS " + SongSQLContainer.TABLE + " ("
            + "ID INTEGER GENERATED BY DEFAULT AS IDENTITY, "
            + "songTitle varchar(32), "
            + "songLyrics longvarchar, "
            + "songAuthor varchar(32), "
            + "modifiedBy varchar(32), "
            + "modifiedDate DEFAULT CURRENT_TIMESTAMP, "
            + "version INTEGER DEFAULT 0 NOT NULL, "
            + "primary key (ID))";  
    private String insertSampleDataCMD = 
              "INSERT INTO " + SongSQLContainer.TABLE + " VALUES(NULL,'Naslov neke pjesme', 'Sadrzaj neke pjesme', 'Samuel', '', '06/11/2014 11:25',0);";
    private String testTableCMD = "SELECT * FROM INFORMATION_SCHEMA.SYSTEM_TABLES where TABLE_TYPE='TABLE'";
    private String testTableDataCMD = "SELECT * FROM " + SongSQLContainer.TABLE;
    static private String deleteAllDataCMD = "delete from " + SongSQLContainer.TABLE;
    
    static String normalizeString(String input) {
        return input.replaceAll("'", "''");
    }

    public static void importSongToDB(SongClass song) throws ClassNotFoundException {
        Class.forName("org.hsqldb.jdbc.JDBCDriver");

        Connection connection = null;
        try {
            // connection = DriverManager.getConnection("jdbc:sqlite:" + dbPath);
            // connection = DriverManager.getConnection("org.hsqldb.jdbc.JDBCDriver", "jdbc:hsqldb:file:" + dbPath);
            Properties credentials= new Properties();
            credentials.setProperty("user", "");
            credentials.setProperty("password", "");
            connection = DriverManager.getConnection("jdbc:hsqldb:file:" + dbPath, credentials);
            Statement statement = connection.createStatement();
            statement.setQueryTimeout(30);

            // ID, SONGTITLE, SONGLYRICS, SONGAUTHOR, MODIFIEDBY, MODIFIEDDATE
            statement.executeUpdate("insert into opensongbook values(NULL,'" + normalizeString(song.getTitle()) + "','"
                    + normalizeString(song.getLyrics()) + "','" + normalizeString(song.getAuthor()) + "','" + "unknown"
                    + "'," + "0, 0)");

            System.out.println("song : " + song.getTitle() + " succesfully imported");
        } catch (SQLException e) {
            // if the error message is "out of memory",
            // it probably means no database file is found
            System.err.println(e.getMessage());
        } finally {
            try {
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException e) {
                // connection close failed.
                System.err.println(e);
            }
        }
    }

    public static void testDatabaseTriggerInsert(String songTitle, String songLyrics, String songAuthor,
            String modifiedBy) throws ClassNotFoundException {
        Class.forName("org.sqlite.JDBC");

        Connection connection = null;
        try {
            connection = DriverManager.getConnection("jdbc:sqlite:" + dbPath);
            Statement statement = connection.createStatement();
            statement.setQueryTimeout(30);
            // datetime()
            // ID, songTitle, songLyrics, songAuthor, modifiedBy, modifiedDate
            statement.executeUpdate("insert into songs values(null, " + "'songTitle',  " + "'songLyrics', "
                    + "'songAuthor', " + "'modifiedBy', " + "datetime())");
            statement
                    .executeUpdate("update songs set songLyrics='songLyrics2', modifiedDate=datetime() where songTitle='songTitle'");

            ResultSet rs = statement.executeQuery("select * from songs");
            System.out.println("songs: ");
            while (rs.next()) {
                System.out.println(rs.getString(1) + "\t" + rs.getString(2) + "\t" + rs.getString(3) + "\t"
                        + rs.getString(4) + "\t" + rs.getString(5) + "\t" + rs.getString(6));
            }

            rs.close();
            ResultSet rs2 = statement.executeQuery("select * from song_revisions");
            System.out.println("song_revisions: ");
            while (rs2.next()) {
                System.out.println(rs2.getString(1) + "\t" + rs2.getString(2) + "\t" + rs2.getString(3) + "\t"
                        + rs2.getString(4) + "\t" + rs2.getString(5) + "\t" + rs2.getString(6));
            }

            rs.close();
        } catch (SQLException e) {
            // if the error message is "out of memory",
            // it probably means no database file is found
            System.err.println(e.getMessage());
        } finally {
            try {
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException e) {
                // connection close failed.
                System.err.println(e);
            }
        }
    }

    public static SongClass testDatabaseInsert(String songTitle, String songLyrics, String songAuthor, String modifiedBy)
            throws ClassNotFoundException {
        Class.forName("org.sqlite.JDBC");
        Connection connection = null;
        SongClass song = new SongClass();
        try {
            connection = DriverManager.getConnection("jdbc:sqlite:" + dbPath);
            Statement statement = connection.createStatement();
            statement.setQueryTimeout(30);
            // datetime()
            // ID, songTitle, songLyrics, songAuthor, modifiedBy, modifiedDate
            statement.executeUpdate("insert into songs values(null, '" + songTitle + "','" + songLyrics + "','"
                    + songAuthor + "','" + modifiedBy + "'," + "datetime()," + "0)");

            ResultSet rs = statement.executeQuery("select * from songs");
            System.out.println("songs: ");
            while (rs.next()) {
                song.setTitle(rs.getString(2));
                song.setLyrics(rs.getString(3));
                song.setAuthor(rs.getString(4));
                System.out.println(rs.getString(1) + "\t" + rs.getString(2) + "\t" + rs.getString(3) + "\t"
                        + rs.getString(4) + "\t" + rs.getString(5) + "\t" + rs.getString(6));
            }

            rs.close();
        } catch (SQLException e) {
            // if the error message is "out of memory",
            // it probably means no database file is found
            System.err.println(e.getMessage());
        } finally {
            try {
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException e) {
                // connection close failed.
                System.err.println(e);
            }
        }
        return song;
    }

    public static void createTables() {
        try {
            Class.forName("org.hsqldb.jdbc.JDBCDriver");
        } catch (ClassNotFoundException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }

        Connection connection = null;
        try {
            // connection = DriverManager.getConnection("org.hsqldb.jdbc.JDBCDriver", "jdbc:hsqldb:file:" + dbPath);
            Properties credentials= new Properties();
            credentials.setProperty("user", "");
            credentials.setProperty("password", "");
            connection = DriverManager.getConnection("jdbc:hsqldb:file:" + dbPath, credentials);
            Statement statement = connection.createStatement();
            statement.setQueryTimeout(30);

            // dropping any existing table
            statement.executeUpdate(createTableCMD);
            statement.executeUpdate(deleteAllDataCMD);
        } catch (SQLException e) {
            // if the error message is "out of memory",
            // it probably means no database file is found
            System.err.println(e.getMessage());
        } finally {
            try {
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException e) {
                // connection close failed.
                System.err.println(e);
            }
        }
    }

    public static void selectAllSongs() {

        try {
            Class.forName("org.sqlite.JDBC");
        } catch (ClassNotFoundException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }

        Connection connection = null;
        try {
            connection = DriverManager.getConnection("jdbc:sqlite:" + dbPath);

            Statement statement = connection.createStatement();
            statement.setQueryTimeout(30);

            ResultSet rs = statement.executeQuery("select * from songs");
            System.out.println("songs: ");
            while (rs.next()) {
                System.out.println(rs.getString(1) + "\t" + rs.getString(2) + "\t" + rs.getString(3) + "\t"
                        + rs.getString(4) + "\t" + rs.getString(5) + "\t" + rs.getString(6));
            }

            rs.close();

            ResultSet rs2 = statement.executeQuery("select * from song_revisions");
            System.out.println("song_revisions: ");
            while (rs2.next()) {
                System.out.println(rs2.getString(1) + "\t" + rs2.getString(2) + "\t" + rs2.getString(3) + "\t"
                        + rs2.getString(4) + "\t" + rs2.getString(5) + "\t" + rs2.getString(6));
            }

            rs2.close();
        } catch (SQLException e) {
            // if the error message is "out of memory",
            // it probably means no database file is found
            System.err.println(e.getMessage());
        } finally {
            try {
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException e) {
                // connection close failed.
                System.err.println(e);
            }
        }
    }

    public static ArrayList<SongClass> selectAllSongsClasses() {

        try {
            Class.forName("org.sqlite.JDBC");
        } catch (ClassNotFoundException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }
        ArrayList<SongClass> songsArrayList = new ArrayList<SongClass>();
        Connection connection = null;
        try {
            connection = DriverManager.getConnection("jdbc:sqlite:" + dbPath);

            Statement statement = connection.createStatement();
            statement.setQueryTimeout(30);
            // ID, songTitle, songLyrics, songAuthor, modifiedBy, modifiedDate
            ResultSet rs = statement.executeQuery("select * from songs");
            // System.out.println("songs: ");

            while (rs.next()) {
                SongClass song = new SongClass();
                song.setTitle(rs.getString(2));
                song.setLyrics(rs.getString(3));
                song.setAuthor(rs.getString(4));
                songsArrayList.add(song);
            }

            rs.close();

        } catch (SQLException e) {
            // if the error message is "out of memory",
            // it probably means no database file is found
            System.err.println(e.getMessage());
        } finally {
            try {
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException e) {
                // connection close failed.
                System.err.println(e);
            }
        }
        return songsArrayList;
    }

    public static void main(String[] args) {
    }

}
